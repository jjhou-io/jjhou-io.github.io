<html>// yz912-functional.h

// 砞璸�@ㄇ functors
// 把σ�G�mSTL方絏�濯R�np416~p421
// unary_function, binary_function
// plus, minus, multiplies, divides
// equal_to, greater, greater_equal, less, less_equal

// 砞璸�@ㄇ function adapters
// 把σ�G�mSTL方絏�濯R�n8.4 竊
// bind2nd, binder2nd


#ifndef _YZ_FUNCTIONAL_
#define _YZ_FUNCTIONAL_

namespace YZ
{

// C++ Standard 砏﹚�A–�@�� Adaptable Unary Function 常ゲ斗膥┯�姑��O
template <class Arg, class Result>
struct unary_function {
    typedef Arg argument_type;
    typedef Result result_type;
};

// C++ Standard 砏﹚�A–�@�� Adaptable Binary Function 常ゲ斗膥┯�姑��O
template <class Arg1, class Arg2, class Result>
struct binary_function {
    typedef Arg1 first_argument_type;
    typedef Arg2 second_argument_type;
    typedef Result result_type;
};      

// �H�U6�蝇昂獬N摸�]Arithmetic�^ラㄧΑ
template <class T>
struct plus : public binary_function<T, T, T> {
    T operator()(const T& x, const T& y) const { return x + y; }
};

template <class T>
struct minus : public binary_function<T, T, T> {
    T operator()(const T& x, const T& y) const { return x - y; }
};

template <class T>
struct multiplies : public binary_function<T, T, T> {
    T operator()(const T& x, const T& y) const { return x * y; }
};

template <class T>
struct divides : public binary_function<T, T, T> {
    T operator()(const T& x, const T& y) const { return x / y; }
};

template <class T>
struct modulus : public binary_function<T, T, T> {
    T operator()(const T& x, const T& y) const { return x % y; }
};

template <class T>
struct negate : public unary_function<T, T> {
    T operator()(const T& x) const { return -x; }
};

// �H�U6�蝇艾酃锩霁Y摸�]Relational�^ラㄧΑ
template <class T>
struct equal_to : public binary_function<T, T, bool> {
    bool operator()(const T& x, const T& y) const { return x == y; }
};

template <class T>
struct not_equal_to : public binary_function<T, T, bool> {
    bool operator()(const T& x, const T& y) const { return x != y; }
};

template <class T>
struct greater : public binary_function<T, T, bool> {
    bool operator()(const T& x, const T& y) const { return x > y; }
};

template <class T>
struct less : public binary_function<T, T, bool> {
    bool operator()(const T& x, const T& y) const { return x < y; }
};

template <class T>
struct greater_equal : public binary_function<T, T, bool> {
    bool operator()(const T& x, const T& y) const { return x >= y; }
};

template <class T>
struct less_equal : public binary_function<T, T, bool> {
    bool operator()(const T& x, const T& y) const { return x <= y; }
};

// �H�U3�蝇芭蘅韫B衡摸�]Logical�^ラㄧΑ
template <class T>
struct logical_and : public binary_function<T, T, bool> {
    bool operator()(const T& x, const T& y) const { return x && y; }
};

template <class T>
struct logical_or : public binary_function<T, T, bool> {
    bool operator()(const T& x, const T& y) const { return x || y; }
};

template <class T>
struct logical_not : public unary_function<T, bool> {
    bool operator()(const T& x) const { return !x; }
};


// ---- �H�W常琌 functor�A�H�U常琌 function adapter

// �H�U皌钡竟ノㄓ�恁墁Y�� Adaptable Predicate �号蘅璀t�取]logical negation�^
template <class Predicate>
class unary_negate
  : public unary_function<typename Predicate::argument_type, bool> {
protected:
  Predicate pred;
public:
  explicit unary_negate(const Predicate& x) : pred(x) {}
  bool operator()(const typename Predicate::argument_type& x) const {
    return !pred(x);
  }
};

// 徊�UㄧΑ�Aㄏи�瘫o�Hよ獽ㄏノ unary_negate<Pred>
template <class Predicate>
inline unary_negate<Predicate> not1(const Predicate& pred) {
  return unary_negate<Predicate>(pred);
}


// �H�U皌钡竟ノㄓ盢琘�� Adaptable Binary function 锣传�� Unary Function
template <class Operation> 
class binder2nd
  : public unary_function<typename Operation::first_argument_type,
                               typename Operation::result_type> {
protected:
  Operation op;
  typename Operation::second_argument_type value;
public:
  // �H�U ctor �廿� op ㎝ value�C
  binder2nd(const Operation& x,
            const typename Operation::second_argument_type& y) 
      : op(x), value(y) {}
  typename Operation::result_type
  operator()(const typename Operation::first_argument_type& x) const {
    return op(x, value); 	// 盢 value 么挡�]binding�^�安膜Gま计
                             	// operator() 砆㊣�s�瑟氦藜啤A盢Θ�皁p�翰膜@ま计 
  }
};

// 徊�UㄧΑ�A琵и�瘫o�Hよ獽ㄏノ binder2nd<Op>
// ノ猭�Gㄒ�p bind2nd(less<int>(), 5)
template <class Operation, class T>
inline binder2nd<Operation> bind2nd(const Operation& op, const T& x) {
  typedef typename Operation::second_argument_type arg2_type;
  return binder2nd<Operation>(op, arg2_type(x));
          // �H�Wрx讽暗op�翰膜Gま计���O
          // 粂猭だ猂�Gbinder2nd<T>() 琌玻ネ�@�蛹犬瑟�ン�A() ぇず琌ctor把计�C
          // arg2_type() 琌眏�盥喃�笆�@�C
}



} // namespace YZ

#endif // _YZ_FUNCTIONAL_

