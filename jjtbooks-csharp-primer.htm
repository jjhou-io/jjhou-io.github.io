<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<meta content="text/html; charset=big5" http-equiv="Content-Type">
<meta content="Microsoft FrontPage 3.0" name="GENERATOR">
<title>《C# Primer》簡體中文版 </title>
</head>

<body background %22bgColor=-#ffffff%22%22 tppabs="http://jjhou.boolan.com/bgColor=%22#ffffff%22" text="#000000">

<hr>

<h2 align="center"><strong><font color="#0000FF"><small><small>一刷 ???? 本(2002/??/??)&nbsp;&nbsp;</small></small></font></strong></h2>

<h2 align="center"><font color="#800000">《C# Primer》<br>
<small><small>A practical Approach<br>
</small>簡體中文版</small></font></h2>

<h2 align="center"><font color="#800000"><small>侯捷 / 陳碩 譯</small></font></h2>

<p align="center"><img src="csharp-primer.jpg" tppabs="http://jjhou.boolan.com/csharp-primer.jpg" width="381" height="475"
alt="csharp-primer.jpg (37243 bytes)"></p>

<hr>

<blockquote>
</blockquote>

<p>□適合對象：C# 程式語言學習者<br>
□內容特色：由知名C++技術專家與作家 Stanley B. Lippman 所著。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Lippman 著有《C++ Primer》，為 C++ 領域之傑出教本。<br>
□製作特色：含 index，網片輸出，平裝。<br>
□綱要：</p>

<p>416 pages</p>

<p><big>Now Stan Lippman brings you C# using his famed primer format. <i>C# PRIMER</i> is 
a comprehensive, example-driven introduction to this new object-oriented programming 
language. </big></p>

<p><big>C# is a cornerstone of Microsoft's new .NET platform. Inheriting many features 
from both Java and C++, C# is destined to become the high-level programming language of 
choice for building high-performance Windows and Web applications and components--from 
XML-based Web services to middle-tier business objects and system-level applications. </big></p>

<p><big>First, you will tour the language, looking at built-in features such as the class 
mechanism, class inheritance, and interface inheritance--all while you build small 
programs. Next, you will explore the various library domains supported within the .NET 
class framework. You will also learn how to use the language and class framework to solve 
problems and build quality programs. </big></p>

<p><big>Highlights include: </big>

<ul>
  <li><big>Covers fundamentals such as namespaces, exception handling, and unified type system 
    </big></li>
  <li><big>Presents a wide-ranging tour of the .NET class library, introducing ADO.NET and 
    establishing database connections and the use of XML </big></li>
  <li><big>Provides XML programming using the firehose and DOM parser models, XSLT, XPATH, and 
    schemas </big></li>
  <li><big>Focuses on ASP.NET Web Form Designer, walking through the page life-cycle and 
    caching, and providing a large number of examples. </big></li>
  <li><big>Introduces .NET Common Language Runtime (CLR) </big></li>
</ul>

<p><big>Adding C# to your toolbox will not only improve your Web-based programming 
ability, but also increase your productivity. <i>C# PRIMER</i> provides a solid foundation 
to build upon and a refreshingly unbiased voice on Microsoft's vehicle to effective and 
efficient Web-based programming. </big></p>
<b class="h1">

<p>Table of Contents</b> </p>

<p>Preface. <br>
1. Hello, C. <br>
A First C Program. <br>
Namespaces. <br>
Alternative Forms of the Main Function. <br>
Making a Statement. <br>
Opening a Text File for Read and Write. <br>
Formatting Output. <br>
The string Type. <br>
Local Objects. <br>
A Value and Reference Types. <br>
The C Array. <br>
The new expression. <br>
Garbage Collection. <br>
Dynamic Arrays: The ArrayList Collection Class. <br>
The Unified Type System. <br>
Jagged Arrays. <br>
The Hashtable Container. <br>
Exception Handling. <br>
A Basic Language Handbook. <br>
<br>
2. Class Design. <br>
Our First Independent Class. <br>
Opening a New Visual Studio Project. <br>
Declaring Data Members. <br>
Properties. <br>
Indexers. <br>
Member Initialization. <br>
The Class Constructor. <br>
The Implicit this Reference. <br>
static Class Members. <br>
const and readonly Data Members. <br>
The enum Value Type. <br>
The delegate Type. <br>
Function Parameter Semantics. <br>
Function Overloading. <br>
Variable Length Parameter Lists. <br>
Operator Overloading. <br>
Conversion Operators. <br>
The Class Destructor. <br>
The struct Value Type. <br>
<br>
3. Object-Oriented Programming. <br>
Object-Oriented Programming Concepts. <br>
Supporting a Polymorphic Query Language. <br>
Designing a Class Hierarchy. <br>
Object Lessons. <br>
Designing an Abstract Base Class. <br>
Declaring an Abstract Base Class. <br>
static Members of an Abstract Base Class. <br>
A Hybrid Abstract Base Class. <br>
Defining a Derived Class. <br>
Overriding the Inherited Virtual Interface. <br>
Overriding the Virtual Object Methods. <br>
Member Access: the new and base Modifiers. <br>
Sealing a Class. <br>
The Exception Class Hierarchy. <br>
<br>
4. Interface Inheritance. <br>
Implementing a System Interface: IComparable. <br>
Accessing an Existing Interface. <br>
Defining an Interface. <br>
Explicit Interface Member Implementations. <br>
Inherited Interface Members. <br>
Overloaded, Hidden, or Ambiguous? <br>
Getting Copy Semantics Right: Implementing ICloneable. <br>
Getting Finalize Semantics Right: Implementing IDisposable. <br>
BitVector: Extension through Composition. <br>
<br>
5. Exploring the System Namespace. <br>
Supporting the Fundamental Types. <br>
The array is a System.Array. <br>
Querying the Environment. <br>
System.IO. <br>
A System Miscellany. <br>
Regular Expressions. <br>
System.Threading. <br>
The Web Request/Response Model. <br>
System.Net.Sockets. <br>
System.Data (ADO.NET). <br>
System.Xml. <br>
<br>
6. Windows Forms Designer. <br>
Our First Windows Forms Program. <br>
Building the GUI. <br>
Implementing the Event Callback Routines. <br>
Inspecting and Generating Control Events. <br>
Implementing the MessageBox Popup Dialog. <br>
The ListBox for Unformatted Output. <br>
Exploring the File Dialog. <br>
A Pocketful of Buttons. <br>
Serving Up Menus. <br>
Brief Exposure: the DataGrid Control. <br>
Adding a PictureBox Control. <br>
<br>
7. ASP.NET and Web Forms Designer. <br>
Our First Web Forms Program. <br>
Opening an ASP.NET Web Application Project. <br>
Adding Additional Pages to a Project. <br>
The HyperLink Control: Linking to Other Pages. <br>
The DataGrid Control. <br>
Understanding the Page Event Life Cycle. <br>
The Data Provider. <br>
Web State Management. <br>
Managing State: Class Members. <br>
Managing State: the Session Object. <br>
Managing State: the Application Object. <br>
Validation Controls. <br>
Adding a DropDownList Control. <br>
Adding a Group of RadioButton Controls. <br>
Adding a CheckBox Control. <br>
Adding Validators to a Control. <br>
Adding a Calendar Control. <br>
Adding an Image Control. <br>
Programming Web Server Controls. <br>
<br>
8. The Common Language Runtime. <br>
Assemblies. <br>
Runtime Type Reflection. <br>
Modifying the Retrieval through BindingFlags. <br>
Invoking a Method during Runtime. <br>
Delegating the Test to Reflection. <br>
Attributes. <br>
The Intrinsic Conditional Attribute. <br>
The Intrinsic Serializable Attribute. <br>
The Intrinsic Dllimport Attribute. <br>
Implementing Our Own Attribute Class. <br>
Runtime Discovery of Attributes using Reflection. <br>
The Intermediate Language. <br>
<br>
Index. <br>
</p>

<p>　</p>

<h3>Preface</h3>

<p>C# is a new language invented at Microsoft and introduced with Visual Studio.NET. More 
than a million lines of C# code already have gone into the implementation of the .NET 
class framework. This book covers the C# language and its use in programming the .NET 
class framework, illustrating application domains such as ASP.NET and XML.</p>

<p>My general strategy in presenting the material is to introduce a programming task and 
then walk through one or two implementations, introducing language features or aspects of 
the class framework as they prove useful. The goal is to demonstrate how to use the 
language and class framework to solve problems rather than simply to list language 
features and the class framework API.</p>

<p>Learning C# is a two-step process: learning the details of the C# language and then 
becoming familiar with the .NET class framework. This two-step process is reflected in the 
organization of this text.</p>

<p>In the first step we walk through the language--both its mechanisms, such as class and 
interface inheritance and delegates, and its underlying concepts, such as its unified type 
system, reference versus value types, boxing, and so on. This step is covered in the first 
four chapters.</p>

<p>The second step is to become familiar with the .NET class framework, in particular with 
Windows and Web programming and the support for XML. This is the focus of the second half 
of the book.</p>

<p>Working your way through the text should jump-start your C# programming skills. In 
addition, you'll become familiar with a good swatch of the .NET class framework. All the 
program code is available for download at my company's Web site <a target="new"
href="javascript:if(confirm(%27http://www.objectwrite.com/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.objectwrite.com/%27" tppabs="http://www.objectwrite.com/">www.objectwrite.com</a>. </p>

<p>Mail can be sent to me directly at <a target="new"
href="mailto:slippman@objectwrite.com">slippman@objectwrite.com</a>.</p>

<h3>Organization of the Book</h3>

<p>The book is organized into eight relatively long chapters. The first four chapters 
focus on the C# language, looking at the built-in language features, the class mechanism, 
class inheritance, and interface inheritance. The second four chapters explore the various 
library domains supported within the .NET class framework.</p>

<p><b>Chapter 1</b> covers the basic language, as well as some of the fundamental classes 
provided within the class framework. The discussion is driven by the design of a small 
program. Concepts such as namespaces, exception handling, and the unified type system are 
introduced.</p>

<p><b>Chapter 2</b> covers the fundamentals of building classes. We look at access 
permission, distinguish between const and readonly members, and cover specialized methods 
such as indexers and properties. We walk through the different strategies of member 
initialization, as well as the rules for operator overloading and conversion operators. We 
look at the delegate type, which serves as a kind of universal pointer to a function.</p>

<p><b>Chapters 3 and 4</b> cover, in turn, class and interface inheritance. Class 
inheritance allows us to define a family of specialized types that override a generic 
interface, such as an abstract WebRequest base class and a protocol-specific 
HttpWebRequest subtype. Interface inheritance, on the other hand, allows us to provide a 
common service or shared attribute for otherwise unrelated types. For example, the 
IDisposable interface frees resources. Classes holding database connections or window 
handles are both likely to implement IDisposable, although they are otherwise unrelated.</p>

<p><b>Chapter 5</b> provides a wide-ranging tour of the .NET class library. We look at 
input and output, including file and directory manipulation, regular expressions, sockets 
and thread programming, the WebRequest and WebResponse class hierarchies, a brief 
introduction to ADO.NET and establishing database connections, and the use of XML.</p>

<p><b>Chapters 6 and 7</b> cover, in turn, drag-and-drop Windows Forms and Web Forms 
development. Chapter 7 focuses on ASP.NET, and the Web page life cycle. Both chapters 
provide lots of examples of using the prebuilt controls and attaching event handlers for 
user interaction.</p>

<p>The final chapter provides a programmer's introduction to the .NET Common Language 
Runtime. It focuses on assemblies, type reflection, and attributes, and concludes with a 
brief look at the underlying intermediate language that is the compilation target of all 
.NET languages.</p>

<h3>Written for Programmers</h3>

<p>The book does not assume that you know C++, Visual Basic, or Java. But it does assume 
that you have programmed in some language. So, for example, I don't assume that you know 
the exact syntax of the C# foreach loop statement, but I do assume that you know what a 
loop is. Although I will illustrate how to invoke a function in C#, I assume you know what 
I mean when I say we &quot;invoke a function.&quot; This text does not require previous 
knowledge of object-oriented programming or of the earlier versions of ASP and ADO.</p>

<p>Some people--some very bright people--argue that under .NET, the programming language 
is secondary to the underlying Common Language Runtime (CLR) upon which the languages 
float like the continents on tectonic plates. I don't agree. Language is how we express 
ourselves, and the choice of one's language affects the design of our programs. The 
underlying assumption of this book is that C# is the preferred language for .NET 
programming.</p>

<p>The book is organized into eight relatively long chapters. The first set of four 
chapters focuses on the C# language, looking at the built-in language features, the class 
mechanism, class inheritance, and interface inheritance. The second set of four chapters 
explores the various library domains supported within the .NET class framework, such as 
regular expressions, threading, sockets, Windows Forms, ASP.NET, and the Common Language 
Runtime.</p>

<h3>Lexical Conventions</h3>

<p>Type names, objects, and keywords are set off in Courier font, as in <font
face="Courier">int</font>, a predefined language type; <font face="Courier">Console</font>, 
a class defined in the framework; <font face="Courier">maxCount</font>, an object defined 
either as a data member or as a local object within a function; and <font face="Courier">foreach</font>, 
one of the predefined loop statements. Function names are followed by an empty pair of 
parentheses, as in <font face="Courier">WriteLine()</font>. The first introduction of a 
concept, such as <i>garbage collection</i> or <i>data encapsulation</i>, is highlighted in 
italics. These conventions are intended to make the text more readable.</p>

<h3>Resources</h3>

<p>The richest documentation that you will be returning to time and again is the Visual 
Studio.NET documentation. The .NET framework reference is essential to doing any sort of 
C#/.NET programming.</p>

<p>Another rich source of information about .NET consists of the featured articles and 
columns in the MSDN Magazine. I'm always impressed by what I find in each issue. You can 
find it online at <a target="new" href="javascript:if(confirm(%27http://msdn.microsoft.com/msdnmag  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://msdn.microsoft.com/msdnmag%27" tppabs="http://msdn.microsoft.com/msdnmag">http://msdn.microsoft.com/msdnmag</a>.</p>

<p>The DOTNET mailing list sponsored by DevelopMentor is a rich source of information. You 
can subscribe to it at <a target="new" href="javascript:if(confirm(%27http://discuss.develop.com/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://discuss.develop.com/%27" tppabs="http://discuss.develop.com/">http://discuss.develop.com</a>.</p>

<p>Anything Jeffrey Richter, Don Box, Aaron Skonnard, or Jeff Prosise writes about .NET 
(or XML in Aaron's case) should be considered essential reading. Currently, most of their 
writing has appeared only as articles in <i>MSDN Magazine</i>.Here is the collection of 
books that I have referenced or found helpful: 

<ul>
  <li><i>Active Server Pages+</i>, by Richard Anderson, Alex Homer, Rob Howard, and Dave 
    Sussman, Wrox Press, Birmingham, England, 2000. </li>
  <li><i>C# Essentials</i>, by Ben Albahari, Peter Drayton, and Brad Merrill, O'Reilly, 
    Cambridge, MA, 2001. </li>
  <li><i>C# Programming</i>, by Burton Harvey, Simon Robinson, Julian Templeman, and Karli 
    Watson, Wrox Press, Birmingham, England, 2000. </li>
  <li><i>Essential XML: Beyond Markup</i>, by Don Box, Aaron Skonnard, and John Lam, 
    Addison-Wesley, Boston, 2000. </li>
  <li><i>Microsoft C# Language Specifications</i>, Microsoft Press, Redmond, WA, 2001. </li>
  <li><i>A Programmer's Introduction to C#, 2nd Edition</i>, by Eric Gunnerson, Apress, 
    Berkeley, CA, 2001.</li>
</ul>

<p>Stanley Lippman<br>
Los Angeles<br>
November 18, 2001<br>
www.objectwrite.com <br>
<br>
</p>

<p><a href="csharp-primer-ch01.pdf" tppabs="http://jjhou.boolan.com/csharp-primer-ch01.pdf" target="main">chap01.pdf</a></p>
</body>
</html>
