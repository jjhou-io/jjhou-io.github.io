<html>#include<iostream>
#include<utility>
using namespace std;
 
//以下定義 op<
// : if (p1.first)*(p2.second)-(p1.second)*(p2.first) > 0, 則 p1<p2 為 true

template<>
inline bool operator< <int,int> (const pair<int, int>& p1, const pair<int, int>& p2)
{
    cout << "my op<() 1" << endl;  	
    return(  (p1.first)*(p2.second)-(p1.second)*(p2.first) > 0   );  
}

inline bool operator< (const pair<int, int>& p1, const pair<int, int>& p2)
{
    cout << "my op<() 2" << endl;  	
    return(  (p1.first)*(p2.second)-(p1.second)*(p2.first) > 0   );  
}

/* 
in G291:
以上兩個版本可以同時存在。
如果同時存在，則版本二被喚起。
如果只存在版本一，則版本一被喚起。
如果都不存在，則 STL 版本被喚起。

in CB5:
兩個版本同時不存在：O
兩個版本同時存在：X
版本二單獨存在：O
版本一單獨存在：X

in VC6:
兩個版本同時不存在：O
兩個版本同時存在：X
版本二單獨存在：O
版本一單獨存在：X

疑問：
(1) 按說版本一是很標準的 function template explicit specialization 寫法，
為什麼在 CB5, VC6 無法編譯？是否為 CB5,VC6 的臭蟲？
(2) 版本一是否完全等價於版本二？若是，GCC 不該讓兩者同時存在。若否，
如何在版本二存在的情況下喚起版本一 (in GCC)？
 
*/
 
int main()
{
    pair<int,int> p1(-1,3), p2(2,4);     
      //(p1.first)*(p2.second)-(p1.second)*(p2.first) = (-1*4)-(3*2) = -10 < 0
    cout << "p1 < p2 :" << (p1<p2) << endl;
    cout << "p2 < p1 :" << (p2<p1) << endl;    
    return 0;
}
