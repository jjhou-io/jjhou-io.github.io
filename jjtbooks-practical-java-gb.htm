<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<meta content="text/html; charset=big5" http-equiv="Content-Type">
<meta content="Microsoft FrontPage 3.0" name="GENERATOR">
<title>《Practical Java》中文版 簡體</title>
</head>

<body background %22bgColor=-#ffffff%22%22 tppabs="http://jjhou.boolan.com/bgColor=%22#ffffff%22" text="#000000">

<hr>

<h2 align="center"><strong><font color="#0000FF"><small><small>一刷 6000 冊 (2003/09)&nbsp;&nbsp;</small></small></font></strong></h2>

<h2 align="center"><font color="#800000">《Practical Java》<br>
<small>中文版 （簡體）</small></font></h2>

<h2 align="center"><font color="#800000"><small>侯捷 / 劉永丹 譯</small></font></h2>

<p align="center"><img src="practical-java-gb.jpg" tppabs="http://jjhou.boolan.com/practical-java-gb.jpg" width="326" height="412"
alt="practical-java-gb.jpg (70470 bytes)"></p>

<p align="center">本書範例&nbsp; <a href="PracticalJavaCode.zip" tppabs="http://jjhou.boolan.com/PracticalJavaCode.zip" target="main">PraticalJavaCode.zip</a></p>

<p align="center"><a href="errata-practical-java-gb.txt.htm" tppabs="http://jjhou.boolan.com/errata-practical-java-gb.txt.htm" target="main">簡體中文版勘誤</a></p>

<hr>

<blockquote>
  <p>譯序如下。其他信息請參考<a href="jjtbooks-practical-java.htm" tppabs="http://jjhou.boolan.com/jjtbooks-practical-java.htm" target="main">繁體版</a>說明</p>
  <p><font color="#000000">開放</font>檔案如下：</p>
  <div align="left"><table border="1" borderColorDark="#000000" borderColorLight="#cc3300"
  width="509">
<TBODY>
    <tr>
      <td bgColor="#c0c0c0" width="285"><font color="#000000">檔名</font></td>
      <td bgColor="#c0c0c0" width="120"><font color="#000000">內容</font></td>
      <td bgColor="#c0c0c0" width="86"><font color="#000000">大小 bytes</font></td>
    </tr>
    <tr>
      <td width="285"><a target="main" href="practical-java-gb-chap1-3.pdf" tppabs="http://jjhou.boolan.com/practical-java-gb-chap1-3.pdf">practical-java-gb-chap1-3.pdf</a><p>不需密碼即可開啟。<br>
      <font color="#000000">檔案含簡略書籤（目錄連結）<br>
      <br>
      </font>以上所開放，不同於紙本出版品，是指以繁體版為本，轉換為大陸術語後的版本，仍以繁體中文表現。</td>
      <td width="120">扉頁、譯序、目錄、細目、前言、致謝、1-3章</td>
      <td width="86">　</td>
    </tr>
    <tr>
      <td width="285"><a href="PracticalJavaCode.zip" tppabs="http://jjhou.boolan.com/PracticalJavaCode.zip" target="main">PraticalJavaCode.zip</a></td>
      <td width="120">本書範例源碼<br>
      （原作者提供）</td>
      <td width="86">139,288</td>
    </tr>
</TBODY>
  </table>
  </div><p>不需密碼即可開啟。<font color="#000000">檔案不含書籤（目錄連結）</font>。</p>
  <p>如欲下載，請將滑鼠移至上述 hyperlink，按右鍵，再選<font
  color="#000000">【另存目標...】</font>即可。</p>
  <p>　</p>
  <font FACE="華康粗圓體" LANG="ZH-TW" COLOR="#ffffff"><p ALIGN="left"></font><font
  FACE="華康粗圓體" LANG="ZH-TW" SIZE="6"><a name="foreword">譯序</a><br>
  </font><font FACE="Footlight MT Light,Book Antiqua">by </font><font FACE="華康粗圓體"
  LANG="ZH-TW">侯捷</p>
  </font><font FACE="細明體" LANG="ZH-TW" SIZE="2"><p ALIGN="JUSTIFY"></font><font
  FACE="細明體" LANG="ZH-TW" size="3">面對</font><font size="3">Java<font
  FACE="細明體" LANG="ZH-TW">，可從兩方面看待，一是語言，一是平台。本書談的是</font>Java<font
  FACE="細明體" LANG="ZH-TW">語言，以下我所言種種，也是指</font>Java<font
  FACE="細明體" LANG="ZH-TW">語言。</p>
  </font><p ALIGN="JUSTIFY">Java<font FACE="細明體" LANG="ZH-TW">是一門優秀的面向對象編程語言（</font>Object 
  Oriented Programming Language, OOPL</font><font FACE="細明體" LANG="ZH-TW" size="3">）。什麼是「面向對象」？如何才稱得上「優秀」？前者可定量定性，客觀；後者往往流於個人感受，主觀！所以雖然面向對象語言有著幾近一致的條件和門檻</font><font
  face="細明體" lang="ZH-TW" color="#FF0000" size="3">（註1</font><font size="3"><font
  lang="ZH-TW"><font face="細明體">）</font></font><font FACE="細明體" LANG="ZH-TW">（封裝、繼承、多態</font>…<font
  FACE="細明體" LANG="ZH-TW">），孰優孰劣卻是各人心中一把尺。儘管如此，無人可以否認</font>Java<font
  FACE="細明體" LANG="ZH-TW">語言在</font>OOP<font FACE="細明體" LANG="ZH-TW">（面向對象編程）上擁有良好的特性和優越的表現。</p>
  <p ALIGN="JUSTIFY"></font></font><font face="細明體" lang="ZH-TW" color="#FF0000"
  size="3">註1：</font><font FACE="新細明體" LANG="ZH-TW" color="#408080" size="3">我常憶起網絡論壇上時可與聞的一種怪誕態度。有一派人士主張，</font><font
  size="3" color="#408080" face="細明體" lang="ZH-TW">OO是一種思想，一種思考模式，任何語言都能夠實現它，因而侈言「C或assembly語言也能OO」。任何語言各有用途，這是完全正確的；OO是一種思維，這話也是對的。任何語言都能夠實現OO，這話對某些人也許是對的，對99.9999%的人是錯的。以non-OO語言實現OO思維，非但達成度極低，也非人人能為。Edmund 
  Hillary（艾德蒙 希拉瑞）能達到的高度，你未必達得到 — </font><font
  FACE="新細明體" LANG="ZH-TW" color="#408080" size="3">事實上你通常達不到。（註：Edmund 
  Hillary是第一位登上聖母鋒的地球人，1953年英格蘭遠征隊員。）</font><font
  size="3"><font FACE="細明體" LANG="ZH-TW"></p>
  <p ALIGN="JUSTIFY">我所謂良好的</font>OOP<font FACE="細明體" LANG="ZH-TW">特性，指的是</font>Java<font
  FACE="細明體" LANG="ZH-TW">提供了許多讓程序員得以輕鬆表達面向對象技術與思維的語言關鍵字（</font>keywords<font
  FACE="細明體" LANG="ZH-TW">）如</font>class, abstract, interface, extends, 
  implements, public, protected, private, final, static, finalize…<font FACE="細明體"
  LANG="ZH-TW">，又提供條理清晰結構分明的文件組織方式如</font>package, 
  import<font FACE="細明體" LANG="ZH-TW">，又擁有嚴謹而靈活的動態型別系統（</font>dynamic 
  type system<font FACE="細明體" LANG="ZH-TW">）使得以提供</font>RTTI<font
  FACE="細明體" LANG="ZH-TW">和</font>Reflection<font FACE="細明體" LANG="ZH-TW">機制，並擁有一個優秀、涵蓋面廣、擴充性強的標準程序庫（</font>Java 
  Libraries<font FACE="細明體" LANG="ZH-TW">）。</p>
  <p ALIGN="JUSTIFY">這些優秀的語言構件（</font>constructs<font FACE="細明體"
  LANG="ZH-TW">）雖然好用易用，但不論就技術面或應用面或性能考量，還是有許多隱微細節散佈其中，例如</font>object 
  creation, object initialization, Cloneable, Serializable, Equality, Immutability, 
  Multithreading (Synchronization), Exception Handling…<font FACE="細明體" LANG="ZH-TW">，在在需要</font>Java<font
  FACE="細明體" LANG="ZH-TW">程序員深入認識與理解。</p>
  <p ALIGN="JUSTIFY">市面上</font>Java<font FACE="細明體" LANG="ZH-TW">書籍極多，專注於「編程主題式探討」並「以獨立條款呈現」的書籍比較少。這類書籍面向中高階讀者，不僅選題必須饒富價值、探討必須極為深刻，各主題最好還獨立以利選擇閱讀，卻又最好彼此前後呼應環環相扣，並附良好交叉索引，予讀者柳暗花明的強烈衝擊。此種「專題條款」式的表現風格，在</font>Scott 
  Meyers<font FACE="細明體" LANG="ZH-TW">的《</font><font FACE="Book Antiqua"><i>Effective 
  C++</i></font><font FACE="細明體" LANG="ZH-TW">》和《</font><font
  FACE="Book Antiqua"><i>More Effective C++</i></font><font FACE="細明體" LANG="ZH-TW">》二書面世之後獲得許多讚揚，也引來許多追隨。</p>
  <p ALIGN="JUSTIFY">《</font><font FACE="Book Antiqua"><i>Practical Java</i></font><font
  FACE="細明體" LANG="ZH-TW">》和《</font><font FACE="Book Antiqua"><i>Effective Java</i></font><font
  FACE="細明體" LANG="ZH-TW">》二書，對前述重要而基礎的技術細微處有著詳盡、深刻、實用的介紹和剖析和範例，又以獨立條款之姿展現，在內容的紮實度、可讀性、易讀性上表現均十分良好。為此，秉持並承繼我為</font>C++ 
  <font FACE="細明體" LANG="ZH-TW">社區翻譯《</font><font FACE="Book Antiqua"><i>Effective 
  C++</i></font><font FACE="細明體" LANG="ZH-TW">》、《</font><font
  FACE="Book Antiqua"><i>More Effective C++</i></font><font FACE="細明體" LANG="ZH-TW">》的態度和機緣，我很開心再次由我負責，將《</font><font
  FACE="Book Antiqua"><i>Practical Java</i></font><font FACE="細明體" LANG="ZH-TW">》和《</font><font
  FACE="Book Antiqua"><i>Effective Java</i></font><font FACE="細明體" LANG="ZH-TW">》二書中譯本呈獻給</font>Java 
  <font FACE="細明體" LANG="ZH-TW">社區。</p>
  <p ALIGN="JUSTIFY">考慮本書讀者應已具備</font>Java<font FACE="細明體"
  LANG="ZH-TW">編程基礎，對於各種英文術語已有良好的接受度，我在書中保留了許多英文術語，時而中英並陳，包括</font>class, 
  object, interface, reference, instance, array, vector, stack, heap…<font
  FACE="細明體" LANG="ZH-TW">，也包括涉及</font>Java<font FACE="細明體"
  LANG="ZH-TW">關鍵字的一些用語如</font>private, public, protected, static, 
  abstract…<font FACE="細明體" LANG="ZH-TW">，不勝枚舉（下頁另有一個扼要說明）。本書努力在字型變化上突顯不同類形的術語，以利讀者閱讀。本書支持網站有一個「術語<font
  FACE="Wingdings">&nbsp;</font> 英中繁簡」對照表，歡迎訪問，網址如下。</p>
  <p ALIGN="JUSTIFY">《</font><font FACE="Book Antiqua"><i>Practical Java</i></font><font
  FACE="細明體" LANG="ZH-TW">》由劉永丹先生和我合力完成。永丹做前期初譯工作，我負責後繼的文字修潤、技術檢閱、大局風貌。永丹技術紮實，文字用心。沒有他的協助，本書不可能在這個時間以這樣的質量面世。謝謝永丹。</p>
  <p ALIGN="JUSTIFY">本書每一章起始處都有作者匠心獨具收集的一些文摘語錄。我們雖勉力譯出，恐見識不足，貽笑大方，故均留下原文和出處，庶幾不誤讀者。</p>
  </font><font FACE="華康中黑體" LANG="ZH-TW"><p ALIGN="JUSTIFY">侯捷</font> 
  2003/07/08 <font FACE="細明體" LANG="ZH-TW">于臺灣</font>.<font FACE="細明體"
  LANG="ZH-TW">新竹</p>
  </font></font><font SIZE="2"><p>jjhou@jjhou.com<font FACE="細明體" LANG="ZH-TW">（電子郵箱）<br>
  </font>http://www.jjhou.com<font FACE="細明體" LANG="ZH-TW">（繁體）（術語對照表</font>http://www.jjhou.com/terms.htm<font
  FACE="細明體" LANG="ZH-TW">）<br>
  </font>http://jjhou.csdn.net<font FACE="細明體" LANG="ZH-TW">（簡體）</font> <font
  FACE="細明體" LANG="ZH-TW">（術語對照表</font>http:// jjhou.csdn.net/terms.htm<font
  FACE="細明體" LANG="ZH-TW">）</p>
  </font></font><font size="3"><p ALIGN="JUSTIFY">p.s. <font FACE="細明體" LANG="ZH-TW">本書已就英文版截至</font>2003/07/08</font><font
  FACE="細明體" LANG="ZH-TW" size="3">之勘誤表修正於紙本。</p>
  <p ALIGN="JUSTIFY"><font color="#0000FF">■ 本書術語翻譯與保留之大致原則：</font></p>
  </font><font FACE="細明體" LANG="ZH-TW" SIZE="2"><dir>
    </font><font FACE="細明體" LANG="ZH-TW" size="3"><p ALIGN="JUSTIFY">※</font><font
    size="3"> <font FACE="細明體" LANG="ZH-TW">廣被大眾接受之術語，無需額外說明，不在此列。例如繼承（</font>inheritance<font
    FACE="細明體" LANG="ZH-TW">）、封裝（</font>encapsulation<font FACE="細明體"
    LANG="ZH-TW">）、多態（</font>polymorphism<font FACE="細明體" LANG="ZH-TW">）。</p>
    <p ALIGN="JUSTIFY">※</font> <font FACE="細明體" LANG="ZH-TW">本書保留與</font>Java<font
    FACE="細明體" LANG="ZH-TW">關鍵字相關之術語不譯，例如</font>class, 
    interface, private, public, protected, static, final, abstract, synchronized, serializable…<font
    FACE="細明體" LANG="ZH-TW">。</p>
    <p ALIGN="JUSTIFY">※</font> <font FACE="細明體" LANG="ZH-TW">本書保留數據結構名稱不譯，例如</font>array, 
    vector, list, map, set, stack, heap…<font FACE="細明體" LANG="ZH-TW">。</font>&quot;<b>collection</b>&quot; 
    <font FACE="細明體" LANG="ZH-TW">譯為「群集」。</p>
    <p ALIGN="JUSTIFY">※</font> &quot;<b>class</b>&quot; <font FACE="細明體" LANG="ZH-TW">及其所衍生之各種名詞如</font>subclass, 
    superclass, immutable class, mutable class, base class, derived class<font
    FACE="細明體" LANG="ZH-TW">等皆保留不譯（時而英中並陳）。</font>&quot;<b>object</b>&quot; 
    <font FACE="細明體" LANG="ZH-TW">大多數時候譯為「對象」，時而保留。</font>&quot;<b>object 
    reference</b>&quot; <font FACE="細明體" LANG="ZH-TW">保留不譯，</font>&quot;<b>reference</b>&quot; 
    <font FACE="細明體" LANG="ZH-TW">亦不譯。</p>
    <p ALIGN="JUSTIFY">※</font> &quot;<b>type</b>&quot; <font FACE="細明體" LANG="ZH-TW">譯為「型別」。</font>&quot;<b>parameter</b>&quot; 
    <font FACE="細明體" LANG="ZH-TW">譯為「參數」，</font>&quot;<b>argument</b>&quot; 
    <font FACE="細明體" LANG="ZH-TW">譯為「引數」。</font>&quot;<b>delegate</b>&quot;, 
    &quot;<b>delegation</b>&quot; <font FACE="細明體" LANG="ZH-TW">譯為「委託」，</font>&quot;<b>aggregate</b>&quot;, 
    &quot;<b>aggregation</b>&quot; <font FACE="細明體" LANG="ZH-TW">譯為「聚合」。</font>&quot;<b>composition</b>&quot; 
    <font FACE="細明體" LANG="ZH-TW">譯為「複合」。</p>
    <p ALIGN="JUSTIFY">※</font> <font FACE="細明體" LANG="ZH-TW">動詞</font> &quot;<b>create</b>&quot; 
    <font FACE="細明體" LANG="ZH-TW">譯為「創建」或「建立」，描述物件之初次誕生。動詞</font> 
    &quot;<b>refer</b>&quot; <font FACE="細明體" LANG="ZH-TW">譯為「指涉」或「指向」或「引用」。動詞</font> 
    &quot;<b>dereference</b>&quot; <font FACE="細明體" LANG="ZH-TW">譯為「提領」。動詞</font> 
    &quot;<b>override</b>&quot; <font FACE="細明體" LANG="ZH-TW">譯為「覆寫」。動詞</font> 
    &quot;<b>overload</b>&quot; <font FACE="細明體" LANG="ZH-TW">譯為「重載」。</p>
    <p ALIGN="JUSTIFY">※</font> <font FACE="細明體" LANG="ZH-TW">本書將</font>Java 
    class &quot;<b>methods</b>&quot; <font FACE="細明體" LANG="ZH-TW">譯為函數，因為它等價於其他編程語言之</font> 
    &quot;function&quot;<font FACE="細明體" LANG="ZH-TW">。若直譯為「方法」，行文缺乏術語突出感，恐影響閱讀流暢；若不譯，過於頻繁出現又恐影響版面觀感。</p>
    <p ALIGN="JUSTIFY">※</font> <font FACE="細明體" LANG="ZH-TW">本書將</font>Java 
    class &quot;<b>fields</b>&quot; <font FACE="細明體" LANG="ZH-TW">譯為值域，等價於</font>C++ 
    <font FACE="細明體" LANG="ZH-TW">語言之</font> &quot;data member&quot;<font
    FACE="細明體" LANG="ZH-TW">。</p>
    <p ALIGN="JUSTIFY">※</font> <font FACE="細明體" LANG="ZH-TW">本書將</font> &quot;<b>clone</b>&quot; 
    <font FACE="細明體" LANG="ZH-TW">譯為「克隆」，映照</font> &quot;<b>copy</b>&quot; 
    <font FACE="細明體" LANG="ZH-TW">之於「拷貝」。非單純保留</font> 
    &quot;clone&quot; <font FACE="細明體" LANG="ZH-TW">是因為它時常做為動詞並頻繁出現，而我對術語的保留態度是儘量只考慮名詞（偶有形容詞）。</p>
    <p ALIGN="JUSTIFY">※「</font></font><font FACE="Lucida Sans" size="2">static</font><font
    FACE="細明體" LANG="ZH-TW" size="3">值域與</font><font FACE="Lucida Sans" size="2">instance</font><font
    FACE="細明體" LANG="ZH-TW" size="3">值域」、「</font><font FACE="Lucida Sans"
    size="2">reference</font><font FACE="細明體" LANG="ZH-TW" size="3">對象與</font><font
    FACE="Lucida Sans" size="2">value</font><font FACE="細明體" LANG="ZH-TW" size="3">對象」、「</font><font
    FACE="Lucida Sans" size="2">reference</font><font FACE="細明體" LANG="ZH-TW" size="3">型別與</font><font
    FACE="Lucida Sans" size="2">primitive</font><font FACE="細明體" LANG="ZH-TW" size="3">型別」等等術語保留部分英文，並使用特殊字型。</p>
    <p ALIGN="JUSTIFY">※</font><font size="3"> <font FACE="細明體" LANG="ZH-TW">本書支持網站有一個「術語英中繁簡」對照表，歡迎訪問，網址見上頁。</p>
    <p ALIGN="JUSTIFY">※</font> <font FACE="細明體" LANG="ZH-TW">術語翻譯有許多兩難之處，祈願讀者體諒；譯者勉力求取各方平衡，並儘可能於突兀處中英並陳。</p>
  </dir>
  </font><p ALIGN="JUSTIFY">-- <font FACE="細明體" LANG="ZH-TW">侯捷</p>
  </font></font><p>　</p>
</blockquote>
</body>
</html>
