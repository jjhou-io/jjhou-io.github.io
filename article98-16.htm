<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<meta content="text/html; charset=big5" http-equiv="Content-Type">
<meta content="Microsoft FrontPage 3.0" name="GENERATOR">
<title>C++ 的沉迷與愛戀</title>
</head>

<body background %22bgColor=-#ffffff%22%22 tppabs="http://jjhou.boolan.com/bgColor=%22#ffffff%22" text="#000000">

<hr>

<h2 align="center">C++ 的沉迷與愛戀</h2>

<blockquote>
  <p align="center">侯捷 1998.09.28</p>
</blockquote>

<hr>

<blockquote>
  <p>每年的 09/28 於我都是一個特殊的日子 -- 
  不只是因為教師節。今年很特殊地沒有普天同慶，那麼我就寫篇文章自己慶祝一下好了。<br>
  <br>
  我於今年七月發表了一本著作<font color="#000000">《</font>多型與虛擬<font
  color="#000000">》</font>和一本譯作 &lt;深度探索 C++ 物件模型&gt; 
  ，獲得很大的迴響。這些作品都不是針對 C++ 
  的完全初學者所寫，但從初階到高階為數眾多的 C++ guy，熱情地表達了他們對這些主題的喜悅。<br>
  <br>
  在許多來信中，我看到一些有趣的現象，也感受到一些值得整理下來的想法。所以，根據我個人的學習過往、我的教學經驗、以及週遭朋友的心得交流，寫下這篇文章，或可為後學者戒。<br>
  <br>
  <font color="#000000">●《多型與虛擬》序言節錄</font><br>
  <br>
  首先讓我節錄<font color="#000000">《</font>多型與虛擬<font color="#000000">》</font>一書序言：<br>
  <br>
  <font color="#000000">《</font>多型與虛擬<font color="#000000">》</font>序 
  節錄（侯俊傑/松崗/1998/07）<br>
  <br>
  <font color="#0000FF">一般而言，C++ 是一個難學易用的語言。<br>
  <br>
  C++ 
  的難學，初始在於其重重的佈幕，佈幕之中編譯器對我們的程式碼做了太多的手腳，使我們慣於循序思考的工程腦袋一無所措。及長，又面臨新的思維模式，使我們必須扭轉慣常的思考習慣。<br>
  <br>
  C++ 的易用則在於其巨大的彈性，能夠以多型（polymorphism）、虛擬（virtual）、模板（template）、泛型（generalization）等種種型式，讓既有的碼去處理未知的、未來的資料型態。<br>
  <br>
  當然，易用必須先能用。用不好或不能用的話，「寫 C++ 
  程式」最後就成了只是「使用 C++ 
  編譯器」，這是大家常拿來彼此調侃的笑話。<br>
  <br>
  在「難學」的背景下，「易用」是使我們依然前仆後繼的動力。愈來愈多的大學資訊科系把 
  C++ 開在大一課程，這雖然說明 C++ 
  是多麼地重要，可也苦了資訊新兵們。<br>
  <br>
  其實「難學」的最大癥結在於，很難得有一本書，能夠一針見血地指出多型與虛擬的重要性；在我們粗具語法基礎之後，直接把我們導引到最核心最重要的思想，並且在建立這個思想的過程中，提供足夠的必要基礎。</font><br>
  <br>
  <font color="#000000"><br>
  ●困難度之一</font><br>
  <br>
  「C++ 是個難學易用的語言」，這句話相信很多人心有戚戚。C++ 
  的學習難度，一在於語言本身太多的「幕」，一在於 &quot;paradigm 
  shift&quot; （思考模式的移轉）。<br>
  <br>
  傳統循序語言如 C, Pascal, Basic, Fortran...，除了模樣看起來稍有不同，基本上都是函式 
  call 來 call 去，大同小異，很容易掌握。你想做的動作，在 code 
  中都看得一清二楚。你所看不到的，犖犖大者也不過就是編譯器為你的函式加上用以處理堆疊的一小段碼（prologue 
  和 epilogue），這一小段碼基本上做的是 housekeeping 
  工作，你沒看到也沒有關係（更好），並不影響你對程式邏輯的思考。<br>
  <br>
  C++ 不一樣，C++ 
  有太多和程式邏輯息息相關的動作是編譯器為我們加上去的。換句話說 
  C++ 編譯器為我們「加碼」。如果不識清這一節，學習C++ 
  有如霧裡看花，霧非霧，花非花。<br>
  <br>
  編譯器為我們的 C++ 程式加了什麼碼呢？很多！物件誕生時 ctor 
  會被喚起，物件死亡時 dtor 會被喚起，這都是加碼的結果。ctor 
  中設定vtpr 和 vtbl，這也是加碼的結果。new 單一物件時會產生 memory 
  block cookie，new 物件陣列時會產生一個內部結構記錄著 object size 和 
  class ctor...，這也都是布幕後的工作。可以說，程式碼中看不到而卻必須完成的所有與程式邏輯有關的動作，統統都是 
  C++ 編譯器加碼後的結果。<br>
  <br>
  當「繼承」發生，整個情況變得稍微複雜起來。「多重繼承」又更複雜一些，「虛擬繼承」再更複雜一些。<br>
  <br>
  這些布幕後的主題，統可歸類為所謂的 C++ object model（物件模型）。如果不知道這些底層機制，你就只能夠把 
  &quot;make destructors virtual in base classes&quot;（&lt;Effective C++&gt;, item14）或 
  &quot;never treat arrays polymorphically&quot; （&lt;More Effective C++&gt;, item 3）這類規則硬背下來，卻不明白它的道理。<br>
  用一樣東西，卻不明白它的道理，林語堂如是說：『不高明』。只知道 
  how，不知道 why，侯捷如是說：『不高明』。<br>
  <br>
  <font color="#000000">●困難度之二</font><br>
  <br>
  C++ 的第二個學習難度在於 &quot;paradigm shift&quot;（思考模式的移轉）。別說自己設計 
  classes 了，光使用別人的 classes，就都是一種思考模式和行為模式的移轉。MFC（或 
  OWL 或 VCL）programmer 必然甚能夠領略並體會我的意思。<br>
  <br>
  使用所謂的 application framework（一種大型的、凝聚性強的、有著物件導向公共基礎建設的 
  class library），你的碼和 framework 之間究竟是怎樣的關係呢？framework 
  提供的一大堆可改寫的虛擬函式的意義與價值究竟在哪裡呢？為什麼 
  framework 
  所設計的種種美好性質以及各式各樣的演算法竟然可以施行於我們自己設計的 
  class types 身上呢？framework 被設計時，並不知道我們的存在呀！<br>
  <br>
  這正是物件導向中的多型（polymorphism）的威力。<br>
  <br>
  稍早所說的 C++ 
  物件模型，偏屬程式設計的低層面；這裡所說的思考模式移轉，則是程式設計的高層面。能夠把新思維模式的威力發揮得最淋漓盡致的，當推物件導向的 
  polymorphism（多型）和 generalization（泛型）。如果你沒有使用這兩項特性，等於入 
  C++ 寶山而空手返。<br>
  <br>
  <font color="#000000">●反覆焠鍊，循環震盪</font><br>
  <br>
  想像 C++ 
  是一把用來解決程式問題的刀，要它堅軔，要它鋒利，就必須經過多次的回火，在高熱和驟冷之間焠鍊。<br>
  <br>
  初學 C++ 語法（syntax）之後，你應該儘快嘗試體驗 polymorphism 
  （大致而言也就是虛擬函式的運用）。等到對 OOP 
  的精神有了大局掌控的能力，但對 C++ 
  的許多小細節不甚清楚，就是回到C++ 物件模型焠鍊的時機。<br>
  <br>
  成長，是在高階（polymorphism）和低階（object model）之間反覆震盪，才能夠震盪到更高的位階，而不是平平庸庸於中階（C++ 
  syntax）的一灘死水。<br>
  <br>
  <font color="#000000">●不要沉淪於 C++ syntax</font><br>
  <br>
  100 個人跟我說他懂 C++/OOP，只有 10% 
  不到可以讓我認為他沒有胡吹大氣。太多的人，上嘛上不到 
  polymorphism，下嘛又下不到object model。就這樣不上不下地卡在 C++ 
  語法層面。大一學了C++，到大四快畢業了，連 virtual functions 
  是怎麼回事都期期艾艾支支吾吾說不出個道理。<br>
  <br>
  有時候我覺得，太苛責同學也於心不忍，因為同學們事實上處於一種無知的狀態，既不知道 
  C++/OOP 
  該怎麼學，也不知道哪些書可以教他們那麼學。所以，苛責同學，不如責怪老師。<br>
  <br>
  眾所週知，大學教授泰半是動口不動手，普遍的心態是「論文第一，升等為要；程式語言？哎，末流！」。「末流」課程通常由教授們輪流教，誰倒楣誰來教；於是就常常有「下學期要教 
  C++ 
  語言了，這學期寒（暑）假趕快去要本書來惡補」的情況發生。偏偏程式語言這東西，只動口不管用，一定要動手，而且要常動手。老師自己沒有摸到C++/OOP 
  的精神，學生又能學到什麼？<br>
  <br>
  有些學校資訊系並不教特定的程式語言，老師們的態度是「語言是一種自己學就好了的東西嘛，拿到大學殿堂來，哎，不入流」！於是應該好好為學生打下實際基礎的課程，卻天馬行空地騰雲駕霧起來，大談抽象意念。飽讀經書的老師們可能忽略了，一個完全沒有技術基礎的學子，要的不是形而上的道，而是形而下的器。<br>
  <br>
  我們是先能夠欣賞具象畫，還是先能夠欣賞抽象畫？我們不都是先對畢卡索的畫大罵「這是什麼東西」，直到自己的藝術涵養夠豐富了、人生閱練更飽滿了、能夠舉一隅以三隅反了、能夠接觸類旁通左右逢源了，才轉而能夠欣賞甚至進入畢卡索的抽象意境嗎？<br>
  <br>
  老師們各有專長，要老師們來教非彼專長的大班課、基礎課，我又覺得似乎也太為難老師了。那麼，苛責老師，不如責怪學校當局。如果學校當局能夠聘請經驗老道又有教學熱誠的工程師來教這類實務學科，不是三方皆大歡喜嗎？不要說什麼制度僵化啦，難以突破啦，大學是高度自治區，禮聘幾位兼任老師，不全都是系上的權責範圍內嗎？<br>
  <br>
  當學子們在課程上學不到他要的東西，就只好閉門自修。但是，循序性（sequential）語言尚有自修學會的可能，物件導向語言嘛，以大學生的程度來講，我認為自修實在困難，只會修出個四不像、半瓶水。<br>
  <br>
  管不到學校！管不到教授！自求多福的情況下，希望看到這篇文章的你，知道 
  C++/OOP 該怎麼學。<br>
  <br>
  <font color="#000000">●不要沉迷於 C++ object model</font><br>
  <br>
  對於底層知識有濃厚興趣的朋友，下探到 object model 
  領域，一定會非常開心地在 object size、object layout、vptr/vtbl、以及許多佈幕後的技術之間玩將起來。瞭解這些東西，當然是好的，但是由於一探究竟得其奧秘的快感與成就感，使得一些朋友們在這個層面裡「玩」起來了，小地方玩得很精，玩得不亦樂乎，玩得忽略了 
  C++/OOP 的最終目標。<br>
  <br>
  最終目標是 polymorphism！<br>
  <br>
  我要說，在 C++ syntax 以及相對低階的 C++ semantics 
  裡，不要玩得太過火。過猶不及，會傷身的。C++ 
  經典名書內附的一些習題，在我看來頗有點玩得過火的味道。至於什麼百題精選、題庫大成，除了修練基本功之外，都滿無趣的東西。<br>
  <br>
  Programming 
  應該是一種天馬行空的想像力與創意的組合；如果你能夠自己想題目，譬如說實作一個天體運行的 
  class 
  體系、或是實作一個生物分類（界門綱目科屬種）體系，不是很有趣嗎？準備資料的過程中，查查百科全書，你也因此查到了太陽系九大行星的幾何資料，哈雷慧星的軌道週期，或是黑面琵鷺的「界門綱目科屬種」英文名稱，這難道不比鑽研於 
  ++++i 或 ----i 或 *&amp;*&amp;p 
  之類的頭腦體操題目有趣嗎？（看過不少這類好笑題目，沒一個記下來，只好胡亂寫幾個運算式。諸位應該知道我說的那種頭腦體操題目）<br>
  <br>
  固然，在科學與工程的領域裡頭，無技術無以為立，但別把自己弄得過於僵化，過於匠氣。僵化與匠氣是我們教育體系的最大沉痾。到了高專層次，敗象顯露無遺。<br>
  <br>
  <font color="#000000">●名書推薦</font><br>
  <br>
  如果沒有介紹幾本好書，我就是為德不卒。<br>
  <br>
  讓我再節錄<font color="#000000">《</font>多型與虛擬<font color="#000000">》</font>的二刷感言：<br>
  <br>
  <font color="#0000FF">... C++ 
  相關書籍，如天上繁星，如過江之鯽。廣博如四庫全書者有之（如 
  The C++ Programming Language、C++ Primer），深奧宛如山重水複有之（如 Inside 
  The C++ Object Model），獨沽一味者有之（如 C++ Programming Style、More 
  Effective C++），獨樹一幟者有之（如 The Design and Evolution of C++），另闢蹊徑者亦有之（如 
  STL tutorial Reference Guide）。... </font><br>
  <br>
  以下是我認為你應該要擁有的書籍。有趣的是，我才在自己班上做了一個調查（我教的是物件導向 
  Windows 程式設計，學生應該要有良好的 C++/OO 基礎），擁有以下 1~5 
  本書的人舉手。舉手人數都很少，而且老是那幾位（最高記錄是擁有四本）。這讓我感覺，強者恆強，弱者恆弱。悲夫！<br>
  <br>
  1. <font color="#0000FF">C++ Primer</font> (3/e), Lippman/A.W./1998 <br>
  &nbsp;&nbsp;&nbsp; 聽說 1999 將有中譯本</p>
  <p><img src="cpp-primer.jpg" tppabs="http://jjhou.boolan.com/cpp-primer.jpg" alt="cpp-primer.jpg (20871 bytes)" width="212" height="264"><br>
  <br>
  2. <font color="#0000FF">The C++ Programming Language</font> (3/e), Bjarne/A.W./1997 <br>
  &nbsp;&nbsp;&nbsp; 聽說 1999 將有中譯本</p>
  <p><img src="bjarne.jpg" tppabs="http://jjhou.boolan.com/bjarne.jpg" alt="bjarne.jpg (19218 bytes)" width="220" height="272"><br>
  <br>
  以上兩本書是 C++ 經典百科。就內容水平而言，我認為同為瑜亮。 
  普遍的印象是，第一本較易接受，第二本澀味稍重。第二本書 作者 
  Bjarne 是 C++ 語言的創造者，所以有其權威性。我認識的多 位 C++/OOP 
  高手，都是兩書齊具。<br>
  <br>
  3. <font color="#0000FF">Inside The C++ Object Model</font>, Lippman/A.W./1996 <br>
  &nbsp;&nbsp;&nbsp; 中譯本<font color="#000000">《</font>深度探索 C++ 
  物件模型》</p>
  <p><img src="inside-cpp-object-model.jpg" tppabs="http://jjhou.boolan.com/inside-cpp-object-model.jpg" alt="inside-cpp-object-model.jpg (16988 bytes)"
  width="183" height="264"><br>
  <br>
  此書全冊講解 C++ object model，上窮碧落下黃泉。內容很好，層次也高， 
  可惜原文書大大小小的錯誤繁如晨星，閱讀時需小心。<br>
  <br>
  4. <font color="#0000FF">Effective C++</font>, Meyers/A.W./1992 <br>
  &nbsp;&nbsp;&nbsp; 印象似有中譯本，名稱忘了，誰可補充說明？</p>
  <p><img src="meyers1.jpg" tppabs="http://jjhou.boolan.com/meyers1.jpg" alt="meyers1.jpg (17528 bytes)" width="214" height="264"><br>
  <br>
  5. <font color="#0000FF">More Effective C++</font>, Meyers/A.W./1996 <br>
  &nbsp;&nbsp;&nbsp; 有中譯本嗎？我不知道，誰可補充說明？</p>
  <p><img src="meyers2.jpg" tppabs="http://jjhou.boolan.com/meyers2.jpg" alt="meyers2.jpg (15071 bytes)" width="220" height="272"><br>
  <br>
  以上是同一作者的兩本書，專講 C++ programming 
  的重要觀念，使你的程式更穩健更有效率。書中許多觀念涉及 C++ 
  object model，與 (3) 混合看將如魚得水。<br>
  <br>
  6. <font color="#0000FF">Polymorphism in C++ &lt;多型與虛擬&gt;</font> 侯俊傑/松崗/1998 
  <br>
  &nbsp;&nbsp;&nbsp; 沒有中譯本 -- 它本身就是中文書</p>
  <p><img src="g001.jpg" tppabs="http://jjhou.boolan.com/g001.jpg" alt="g001.jpg (11189 bytes)" width="235" height="288"><br>
  <br>
  在語法粗具的基礎上，直接把讀者導引到最核心最重要的思想，並且 
  在建立這個思想的過程中，提供足夠的必要基礎。</p>
  <p>　</p>
  <p><br>
  我只列出一本中文書，是因為這方面的中文書我看得少，英文書看得多。「恐有遺珠之憾」這類「八方得體」的話，還是說一下好了 
  :)。</p>
  <p>注意，這些都只是強本固元用來紮基礎的書籍而已，要觀摩大型程式經驗，還有諸如 
  <font color="#0000FF">Large Scale C++ Software Design</font>（John Lakos/A.W./1996）可以閱讀。</p>
  <p><img src="large-scale-cpp-software-design.jpg" tppabs="http://jjhou.boolan.com/large-scale-cpp-software-design.jpg"
  alt="large-scale-cpp-software-design.jpg (16997 bytes)" width="214" height="264"></p>
  <p><br>
  OO 的世界，不止 OOP，還有 OOA/OOD，那又是一缸子的學問和一缸子的書。<br>
  <br>
  --- end</p>
</blockquote>
</body>
</html>
