<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=big5">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>《多型與虛擬》答客問</title>
<meta name="Microsoft Theme" content="construc 111, default">
<meta name="Microsoft Border" content="tl, default">
</head>

<body background="urbtextb.gif" tppabs="http://jjhou.boolan.com/urbtextb.gif" bgcolor="#FF9900" text="#330033" link="#009900"
vlink="#996600" alink="#FF0066">
<!--mstheme--></font><div align="center"><center>

<table border="0" cellpadding="0" cellspacing="8" width="723">
  <tr>
    <td align="right" valign="top" width="65">&nbsp; <!--mstheme--></font></td>
    <td width="21"><!--mstheme--></font></td>
    <td valign="bottom" width="613"><!--mstheme--></font></td>
  </tr>
  <tr>
    <td valign="top" width="65" bgcolor="#C0C0C0"><font size="3" face="Arial"><br>
    <br>
    </font><!--mstheme--></font></td>
    <td width="21"><!--mstheme--></font></td>
    <td valign="top" width="613"><br>
    <big><big>《多型與虛擬》答客問 (1)</big></big>&nbsp; 1999.12.11 <br>
    <br>
    Arix wrote (1999/10/29) :<br>
    <br>
    <font color="#0000FF">&gt; 你好：<br>
    &gt;<br>
    &gt; 最近讀了您的大作 &quot;多型與虛擬&quot; 
    之後，有幾點疑問想要請教一下；<br>
    &gt;<br>
    &gt; 1.在第六章 COM to COM 中提到，一個 application 要呼叫一個 .dll 檔時<br>
    &gt; 只要一個 import library 內嵌在其中，而另一個方式是使用<br>
    &gt; LoadLibrary() 和 GetPorcAddress()。請問一下，LoadLibrary()<br>
    &gt; 和 GetPorcAddress() 是如何動作？為何不需要 .dll 的 import library?<br>
    &gt;<br>
    &gt; 2.在提到解決 binary level 封裝問題的時候，就是不要在 client 
    端發生<br>
    &gt; object instantiation。什麼是 object instantiation？<br>
    &gt;<br>
    &gt; 3.三種 calling convention:pascal，c，stdcall。<br>
    &gt; 可不可以說的詳細一點？<br>
    &gt;<br>
    &gt; 謝謝您的解答</font><br>
    <br>
    <br>
    侯捷回覆：<br>
    <br>
    1. LoadLibrary() 是要求 system loader 把你指定的 library (.dll)<br>
    載入目前行程的位址空間中。GetProcAddress() 是取得某個 procedure<br>
    （亦即 function）的位址。有了這個位址（可視為函式指標），就可以<br>
    呼叫該 procedure 了，所以不需 import library。這兩個動作都是<br>
    run-time 解決方案，如果使用 import library，是 link-time 解決方案。<br>
    <br>
    這兩個 Windows API 的細節（內部動作），可參考：<br>
    《Windows 95 系統程式設計大奧秘》（侯俊傑譯/旗標/1997）<br>
    （原著 Windows 95 System Programming SECRETS）<br>
    <br>
    2. object instantiation 就是「產生 object 的行為」。<br>
    是的，欲產生 object，就必須先知道 object size，那麼就會危害到<br>
    binary level 的封裝。<br>
    <br>
    3. 所謂 call convention 是對函式呼叫時的 ：<br>
    (1) 參數傳遞次序<br>
    (2) 清理 stack frame 的責任歸屬<br>
    的一種規範。<br>
    <br>
    pascal convention 規定：參數傳遞次序由左而右，stack frame 的清理<br>
    由被呼叫端（callee）負責。<br>
    <br>
    c convention 規定：參數傳遞次序由右而左，stack frame 的清理<br>
    由呼叫端（caller）負責。<br>
    <br>
    由於 pascal convention 規定 stack frame 的清理由被呼叫端（callee）<br>
    負責，因此如對同一函式呼叫一千次，其 stack frame cleanup routine<br>
    只需一份（位於 callee 內，由編譯器加入）。<br>
    <br>
    由於 c convention 規定 stack frame 的清理由呼叫端（caller）<br>
    負責，因此對同一個函式呼叫一千次，其 stack frame cleanup routine<br>
    需 1000 份（位於呼叫點，由編譯器加入）。<br>
    <br>
    因此，採用 pascal calling convention，對於降低程式碼大小<br>
    （並因而增加執行速度），在某些情況下很有幫助。這是為什麼<br>
    早期 Windows 系統內部幾乎完全採用 pascal calling convention 的原因。<br>
    <br>
    但是 pascall convention 不支援「個數不定之引數」。例如 printf()<br>
    的引數個數不一定，那就一定得使用 c calling convention。<br>
    <br>
    stdcall 是 c 和 pascal 的綜合體，取其優而去其弊。<br>
    <br>
    如果你有 MSDN，上去搜尋一下，很容易就可以查到這些資料！<br>
    <br>
    --- the end<br>
<!--msthemeseparator-->    <p align="left"><img src="urbhorsa.gif" tppabs="http://jjhou.boolan.com/urbhorsa.gif"></p>
    <p><big><big>《多型與虛擬》答客問 (2)</big></big>&nbsp; 1999.12.11 <br>
    <br>
    r7526059 wrote (1999/11/25) :<br>
    <br>
    <font color="#0000FF">&gt; 侯先生您好：<br>
    &gt; 在多型與虛擬一書的32頁中，說<br>
    &gt; 以下兩種情況，會喚起 copy constructor:<br>
    &gt; 情況 1. 將一個object當作參數傳給某一個函式。<br>
    &gt; 情況 2. 將一個object當作函式回返值。<br>
    &gt;<br>
    &gt; 但我寫程式發現： (compiler: Borland C++ 3.1)<br>
    &gt;<br>
    <small><font face="Courier New">&gt; CA aCA1;<br>
    &gt; CA aCA2=aCA1;</font></small><br>
    &gt;<br>
    &gt; 也會喚起aCA2的copy constructor。<br>
    &gt;<br>
    &gt; 請問為何<br>
    <small><font face="Courier New">&gt; CA aCA1;<br>
    &gt; CA aCA2=aCA1;</font></small><br>
    &gt; 時要呼叫copy constructor，而<br>
    &gt;<br>
    <small><font face="Courier New">&gt; CA aCA1;<br>
    &gt; CA aCA2;<br>
    &gt; aCA2=aCA1;</font></small><br>
    &gt; 時卻要呼叫copy assignment constructor 呢？<br>
    &gt;<br>
    &gt; 這樣的設計是有什麼考量在內嗎？(執行效率？)<br>
    &gt; 謝謝！</font><br>
    <br>
    侯捷回覆：<br>
    <br>
    <small><font face="Courier New">CA a1;<br>
    CA a2(a1);&nbsp;&nbsp; // (1) initialization<br>
    CA a3 = a1;&nbsp; // (2) initialization, not assignment.<br>
    a3 = a2;&nbsp;&nbsp;&nbsp;&nbsp; // (3) assignment.<br>
    </font></small><br>
    (1) 或 (2) 都是 initialization 動作，都會喚起 copy ctor。<br>
    (3) 是 assignment 動作，會喚起 assignment operator.<br>
    <br>
    至於為什麼分這兩種，是否有什麼考量在內 (執行效率？)<br>
    唔，我初步認為，只是單純地把 initialization 和 assignment 分類，<br>
    不同的動作由其對應的 member functions 去負責操作，如此而已。<br>
    <br>
    如果你以一段具體的碼，詢問我其間的 assignment 和 initialization<br>
    的效率問題，我可能比較可以具體回答。<br>
    <br>
    default ctor, copy ctor, assignment operator，並稱 &quot;Big Three&quot;，<br>
    請特別搞清楚它們的角色。<br>
    <br>
    * * * * * * * * * * * * * * * * * * * * * *<br>
    <br>
    <font color="#FF0000">william</font> wrote (1999/12/12) :<br>
    <br>
    <font color="#0000FF">若再加兩行程式碼：<br>
    <br>
    <small><font face="Courier New">CA a4;<br>
    a4 = a1;</font></small><br>
    <br>
    很明顯的, 建造 a2 時, 只花了一道 copy ctor 呼叫；<br>
    建造 a4, 卻花了兩道呼叫：先 default ctor、再 assignment。<br>
    <br>
    另一個差別是：<br>
    <br>
    Ａ.一般的 ctor 都會替自身物件<br>
    1. 配置一些資源<br>
    2. 初始化資源。<br>
    <br>
    Ｂ.至於 assignment, 則通常會：<br>
    1. 先將自身物件的既有資源做善後處理（關閉、釋放、解除鎖定...）<br>
    2. 重新配置一些資源<br>
    3. 根據參考體物件的資源, 照拷一份過來。<br>
    <br>
    所謂的 copy ctor, 只是以 B.3 的邏輯來做 A.2 之事。<br>
    <br>
    如果資源內容可直接丟棄（如：純量值）, 則 B.1 可省。<br>
    如果資源本身可再回收利用（如：記憶體）, 則 B.2 
    可能可以省下來。<br>
    <br>
    所以, Ａ 和 Ｂ 的效率高低, 似乎得視情況而定。</font><br>
    <br>
    <br>
    --- the end<br>
    <br>
    &#26;</p>
<!--msthemeseparator-->    <p align="left"><img src="urbhorsa.gif" tppabs="http://jjhou.boolan.com/urbhorsa.gif"></p>
    <p><big><big>《多型與虛擬》答客問 (3)</big></big> 盡入吾彀矣<br>
    1999.12.14 <br>
    <br>
    我在 BBS/News 上看到 qing 寫的一篇深刻的文章。<br>
    <br>
    <font color="#0000FF">&gt; 作者: </font><font color="#FF0000">qing</font><font
    color="#0000FF"> (行動式代理狗) 看板: talk<br>
    &gt; 標題: 關於繼承<br>
    &gt; 時間: Sat Nov 20 03:46:10 1999<br>
    &gt;<br>
    &gt; 有一次和 wiliam, dreamon, Xshadow 聚會的時候, 我曾提出<br>
    &gt; 一個問題, 也就是, 如果要從物件導向的幾種重要屬性, 挑選出<br>
    &gt; 一個最具關鍵性的屬性, 那麼大家會挑選那一個?<br>
    &gt;<br>
    &gt; 這個問題, 是起源於 jjhou 的一本書, 也就是那本, &quot;虛擬與多型<br>
    &gt; - 物件導向的精髓&quot;, 書名我記得不夠精確, 但是從這個描述, 
    大概<br>
    &gt; 不會造成誤解.<br>
    &gt;<br>
    &gt; 從這個書題來看, 以 jjhou 的角度來加以審視, 虛擬與多型是他會<br>
    &gt; 挑選出來的屬性.<br>
    &gt; 像這種選擇的結果, 可以說是各家各有各的說法, 難以論斷高下抑<br>
    &gt; 或是是非. 不過, 在那個時候, 我跟大家說的答案, 是繼承.<br>
    &gt;<br>
    &gt; 當我在試著選出一個我認為最重要的屬性時, 我所判斷的依據, 並<br>
    &gt; 不是編譯器本身, 為了要達到這個能力, 背後所應具備的精巧機制<br>
    &gt; , 而是 OO 這種設計的概念, 對於我自己而言, 能夠創造出來的價<br>
    &gt; 值究竟有多少.<br>
    &gt;<br>
    &gt; [...後略 (內容很多)]</font><br>
    <br>
    ●我的看法<br>
    <br>
    （術語：polymorphism 多型. genericity 泛型. inheritance 繼承）<br>
    <br>
    物件導向技術最重要精神與價值，我以為就是「一般化」<br>
    ：generic, genericity, general, generialization.<br>
    <br>
    「一般化」使我們的程式碼，不論是做為 conatiners（負責資料結構，<br>
    以及對資料結構的操作），或是做為 algorithms（泛用型或自用型），<br>
    都可以處理各種不同型別 -- 甚至是目前未存在的型別 -- 的資料。<br>
    <br>
    （當然，沒有人能夠保證自己的設計完善到一定能夠支援未來可能的<br>
    各種資料型別。為目前已知的各種型別提供一個共同（一般化）介面，<br>
    是比較可能做到的目標。系統的演化有賴回饋與調校。）<br>
    <br>
    「一般化」技術表示在「多型」polymorphism 身上。<br>
    <br>
    傳統的 polymorphism，是由 virtual functions 完成，那當然就<br>
    離不開 inheritance。換言之，polymorphism 的前提是 inheritance。<br>
    是的，polymorphism 涵蓋 inheritance！<br>
    <br>
    這種傳統型式的 polymorphism，稱為 Polymorphism using Virtual<br>
    Methods，又稱為 Vertical Genericity。<br>
    <br>
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * *<br>
    <br>
    Template 也可以完成「一般化」。這種技術稱為泛型（Generic,<br>
    Genericity）。這不同於物件導向，它是另一種思維模式。但它可與<br>
    物件導向技術相輔相成。<br>
    <br>
    Polymorphism 這個詞，在這裡有了一些意義上的擴充。這種情況下，<br>
    有人稱之為 Polymorphism using Templates，又稱為<br>
    Horizental Genericity.<br>
    <br>
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * *<br>
    <br>
    所以，如果要我從 Object Oriented Programming Paradigm 的幾種<br>
    重要屬性中，挑選出一個最具關鍵的屬性，我還是選擇 polymorphism<br>
    （而其意義甚至及於 Generic Programming Paradigm）。<br>
    <br>
    --- the end<br>
    <br>
    &#26;<!--mstheme--></font></td>
  </tr>
</table>
</center></div>

<p>　 </p>
<!--mstheme--></font>
</body>
</html>
