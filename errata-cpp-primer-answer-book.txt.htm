<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=big5">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>勘誤《C++ Primer 題解》</title>
</head>

<body>

<pre>本勘誤檔更新日期: 2002/05/31</pre>

<pre>《C++ Primer 題解》
碁峰, 2000/11 出版</pre>

<pre>目前刷次: 2000/11 第一刷 印量 0001~2000
          2001/02 第二刷 印量 2001~3000
          2001/12 第三刷 印量 3001~3500
          2002/08 第四刷 印量 3501~4000
          2003/10 第五刷 印量 4001~4500</pre>

<pre>原著：C++ Primer Answer Book,  by Clovis L.Tondo &amp; Bruce P.Leung
      Addison Wesley, 1999</pre>

<pre>注意：以下按修正日期排序。</pre>

<pre>======================================================</pre>

<pre>書籍內容更正，有兩種作法，一是在網際網路上做個專屬勘誤
網頁，讓大家上去看。這是比較即時的作法。而更理想更負責
的作法是：不但有勘誤網頁，並且在新刷中予以更正 — 如果
有新刷的話 :)</pre>

<pre>不過，理想與現實之間需要一點協調。書籍的製作是這樣的，
製版與印刷時，是以檯（8 或 16 頁）為單位。因此，每換一
頁，同檯的各頁統統要換過。這便造成印製成本的大量增加。</pre>

<pre>以前，我從不考慮成本，只要我認為書籍內容有修改必要，即
使只是某個字詞用得不甚理想，我都會請出版社更新。出版社
也都全力配合（這一點讓我非常感謝）。</pre>

<pre>慢慢地，我的行事不再這麼霹靂，我覺得我多少也要站在出版
社的立場想想。所以我打算，如果是關係到對錯正誤的根本性
問題，我便一定在新刷修正。如果是易判別的錯別字或排版誤
失或用詞不很恰當…等等，我便先在勘誤網頁上明載，但不求
一定於新刷中更正。直到收集來的這類誤失較為密集了，才一
併於下一刷修正。</pre>

<pre>哪些是新刷已修正的，哪些是暫請讀者自行動手更改的，我會
在勘誤網頁（網址見書封底）上清楚說明。</pre>

<pre>這是個便宜法門，請讀者見諒。</pre>

<pre>書籍應該在出版前就詳細檢查，以完美之姿出現。但是完美很
難達到。對於下列大大小小輕重不等的誤失，我謹向讀者說抱
歉。</pre>

<pre>本檔歡迎廣為流傳，謝謝。</pre>

<pre>以下為更新記錄。如果您購買的是第 n 刷，請將以下第 n+1
刷之後的更新內容自行修正至書上。謝謝</pre>

<pre>======================================================</pre>

<pre>以下暫請讀者自行更正：
（注意，Lm 表示第 m 行，L-n 表示倒數第 n 行）</pre>

<pre>■p.63  L3 （題目與題解不對頭）
原文：unsigned int uil = <font
color="#FF0000">3</font>, ui2 = 7;
更正：unsigned int uil = <font color="#0000FF">5</font>, ui2 = 7;
感謝：ikai
說明：雖然原書題目確是 unsigned int uil = 3，但四個子題皆以
      unsigned int uil = 5 來解題。因此，修改題目。
日期：2001/01/18
</pre>

<pre>■p114, 練習6-14，程式碼最後一行
原文：string sentence = line1 + line2 + line3;
更正：string sentence = line1 + <font
color="#0000FF">' '</font> + line2 + <font color="#0000FF">' '</font> + line3;
注意：題解中的程式碼亦應該修改如上。
感謝：willy
日期：2001/07/23
</pre>

<pre>■p18, 練習2.15，解答 (b) 第一行 (原書筆誤）
原文：因為我們沒有任何機制可以將 Examples &lt;Array &lt;int&gt;* &gt;  轉換為...
更正：因為我們沒有任何機制可以將 Examples &lt;Array &lt;int&gt;* &gt;<font
color="#0000FF">*</font> 轉換為...
感謝：xiaox
日期：2002/04/24</pre>

<pre>■p238 (原書錯誤)
說明：從上下文及前後頁觀之，本頁第二種作法內容描述錯誤（可能是作者copy/paste失誤）。
      目前英文版支援網站上沒有找到勘誤表，無從更正。請讀者注意。
感謝：xiaox
日期：2002/04/30</pre>

<pre>■p296, L15 (英文版筆誤)
原文：在這裡，calc(<font color="#FF0000">LongDouble</font>) 會被選為最佳可行函式。兩個...
更正：在這裡，calc(<font
color="#0000FF">int</font>) 會被選為最佳可行函式。兩個...
感謝：xiaox
日期：2002/04/30</pre>

<pre>■p311, L9 (繁體版補充)
原文：int i = 0;
更正：int i = 0;  <font
color="#0000FF">// 譯註：變數 i 沒有用到，可去除</font>
感謝：xiaox
日期：2002/04/30</pre>

<pre>■p387, L-5 (繁體版筆誤)
原文：(a),(b),(<font color="#FF0000">c</font>) 的 dynamic_casts 都會成功。(a) 成功的原因是，...
更正：(a),(b),(<font
color="#0000FF">d</font>) 的 dynamic_casts 都會成功。(a) 成功的原因是，...
感謝：xiaox
日期：2002/04/30</pre>

<pre>■p390, L-7 (繁體版筆誤)
原文：可丟出任何 exception，因為...
更正：<font
color="#0000FF">不</font>可丟出任何 exception，因為...
感謝：xiaox
日期：2002/04/30</pre>

<pre>■p85, L6 (原書錯誤)
原文：
    switch (ival) {
        case 1:
            int ix = get_value();
            ivec[ix] = ival;
            break;
        default:
            int ix = ivec.size()-1;
            ivec[ix] = ival;
    }</pre>

<pre>更正：
    switch (ival) {
        case 1: {
            int ix = get_value();
            ivec[ix] = ival;
            break;
<font
color="#0000FF">          }</font>
        default: <font color="#0000FF">{</font>
            int ix = ivec.size()-1;
            ivec[ix] = ival;
<font
color="#0000FF">          }</font>
    }
說明：原書所寫解法，int ix 的作用域會有問題。為 case: 和 default:
      各加上一對大括弧，就沒有問題了。
感謝：xiaox
日期：2002/05/07</pre>

<pre>■p212, 練習10.11 之下第4行 (原書錯誤)
原文：double max( double, double) { .... }
更正：請在該行之下再加一行：
<font
color="#0000FF">      int max( int, int) { .... }</font>
說明：本題題解用到了 int max(int, int)，但題目中卻沒有給出其宣告。
檢討：也許《C++ Primer》作者本意並沒有要這個 int max(int, int)
      而是《C++ Primer Answer Book》作者誤會了。不過，既然題解中使用了
      int max(int, int)，我們就順應地修改題目如上吧 :)
感謝：xiaox
日期：2002/05/07
補充：完整程式如下：
// C++ Primer Answer Book. p212, Ex 10.11
#include &lt;iostream&gt;
using namespace std;</pre>

<pre>template &lt;class Type&gt;
Type max( Type v1, Type v2)
{
  cout &lt;&lt; &quot;expression 1&quot; &lt;&lt; endl; return v1&gt; v2 ? v1 : v2;
}</pre>

<pre>double max( double d1, double d2)
{
  cout &lt;&lt; &quot;expression 2&quot; &lt;&lt; endl; return d1&gt; d2 ?  d1 :  d2;
}</pre>

<pre>int max( int i1, int i2)
{
  cout &lt;&lt; &quot;expression 3&quot; &lt;&lt; endl; return i1&gt; i2 ?  i1 :  i2;
}</pre>

<pre>template &lt;&gt; char max&lt;char&gt;( char c1, char c2)
{
  cout &lt;&lt; &quot;expression 4&quot; &lt;&lt; endl; return c1&gt; c2 ? c1 : c2;
}</pre>

<pre>int main() {
    int ival = 3;
    double dval = 3.0;
    float fd = 3.0;</pre>

<pre>    max( 0, ival );     // expression 3
    max( 0.25, dval );  // expression 2
//  max( 0, fd );       // ambigious
    max (0, 'J' );      // expression 3
}
</pre>

<pre>■p142, 練習 7.12 題目 (易起誤會，重新修潤)
原文：請將 factorial() 重寫，使它成為一個非遞迴函式，
      而是一個迭代（iterative）函式。
更正：請<font
color="#0000FF">重寫</font> factorial()，使它<font color="#0000FF">不再是個</font>遞迴（recursive）函式，
      而成為一個迭代（iterative）函式。
提醒：如果您有《C++ Primer 3e 中文版》，也請一併修正（p362）
感謝：yeka
日期：2002/05/23
</pre>

<pre>■p112, 練習 6.12 (英文版錯誤)
說明：本題解法完全錯誤。
更正：請參考 <a
href="qa-cpp-primer-1-15.htm#C++ Primer qa13" tppabs="http://jjhou.boolan.com/qa-cpp-primer-1-15.htm#C++ Primer qa13" target="main">侯捷網站 C++ Primer 3/e中文版答客問 qa13</a> 上的討論（非常詳盡）
總結：iterator 只適用於在「不更動容器佈局」的條件下，對容器做巡訪動作。
      否則對 iterator 的取值行為，直觀下極易誤用。
感謝：maniao
日期：2002/05/31</pre>
</body>
</html>
